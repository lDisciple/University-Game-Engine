#version 400 core

in vec2 pass_texCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

in vec3 pass_normal;

uniform sampler2D texture_sampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

out vec4 out_Color;

void main(void){
    //Diffuse Lighting
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitToLight = normalize(toLightVector);
    float dotLight = dot(unitNormal,unitToLight);
    float brightness = max(0.2,dotLight);
    vec3 diffuse = lightColor * brightness;

    //Specular Lighting
    vec3 unitToCamera = normalize(toCameraVector);
    vec3 reflectedLight = reflect(-unitToLight,unitNormal);
    float specularFactor = dot(unitToCamera,reflectedLight);
    specularFactor = max(0,specularFactor);
    float dampedFactor = pow(specularFactor, shineDamper);
    vec3 finalSpecular = dampedFactor * reflectivity * lightColor;

    out_Color = vec4(diffuse,1) * texture(texture_sampler, pass_texCoords) + vec4(finalSpecular,0);
}
